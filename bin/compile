#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
BUNDLE_DIR="$CACHE_DIR/bundles"
LP_DIR=`cd $(dirname $0); cd ..; pwd`

. $BIN_DIR/../variables.sh

# Compare the md5 of the manifest file with the specified file
# Retrieved on 2012-11-17 from https://github.com/iphoting/heroku-buildpack-php-tyler/blob/master/bin/compile
# Modified by Jesse Patching <jesse@radpenguin.ca> for use in taeram/heroku-buildpack-php
function check_md5() {
    TARGET="$1"
    REMOTE_MD5SUM=`cat "${BUNDLE_DIR}/${MANIFEST_FILE}" | grep "${TARGET}" | cut -d ' ' -f 1`
    LOCAL_MD5SUM=`md5sum ${BUNDLE_DIR}/${TARGET} | cut -d ' ' -f 1`
    ! [ "$REMOTE_MD5SUM" = "$LOCAL_MD5SUM" ]
}

# include .files when moving things around
shopt -s dotglob

mkdir -p $BUNDLE_DIR $BUILD_DIR/bin

export PATH=$PATH:$BUILD_DIR/bin
pushd $BUNDLE_DIR > /dev/null

echo "-----> Fetching Manifest"
curl --silent --max-time 60 -O --location "https://s3.amazonaws.com/$BUILDPACK_S3_BUCKET/$MANIFEST_FILE"

if [ ! -f "$APACHE_TGZ_FILE" ] || check_md5 "$APACHE_TGZ_FILE"; then
    echo "-----> Bundling Apache v${APACHE_VERSION}"
    curl --silent --max-time 60 --location "https://s3.amazonaws.com/$BUILDPACK_S3_BUCKET/$APACHE_TGZ_FILE" -O
else
    echo "-----> Using cached Apache v${APACHE_VERSION}"
fi
tar xf $APACHE_TGZ_FILE -C $BUILD_DIR

if [ ! -f "$PHP_TGZ_FILE" ] || check_md5 "$PHP_TGZ_FILE"; then
    echo "-----> Bundling PHP version v${PHP_VERSION}"
    curl --silent --max-time 60 --location "https://s3.amazonaws.com/$BUILDPACK_S3_BUCKET/$PHP_TGZ_FILE"  -O
else
    echo "-----> Using cached PHP v${PHP_VERSION}"
fi
tar xf $PHP_TGZ_FILE -C $BUILD_DIR

# Make php available to the compiled app and rollout script
ln -s /app/php/bin/php $BUILD_DIR/bin/php
ln -s /app/php/bin/composer $BUILD_DIR/bin/composer
export PATH=$PATH:$BUILD_DIR/php/bin

if [ ! -f "$ANT_TGZ_FILE" ] || check_md5 "$ANT_TGZ_FILE"; then
    echo "-----> Bundling Ant version v${ANT_VERSION} "
    curl --silent --max-time 60 --location "https://s3.amazonaws.com/$BUILDPACK_S3_BUCKET/$ANT_TGZ_FILE"  -O
else
    echo "-----> Using cached Ant v${ANT_VERSION}"
fi
tar xf $ANT_TGZ_FILE -C $BUILD_DIR

# Make ant available to the compiled app and rollout script
ln -s /app/ant/bin/ant $BUILD_DIR/bin/ant
export PATH=$PATH:$BUILD_DIR/ant/bin

if [ ! -f "$NEWRELIC_TGZ_FILE" ] || check_md5 "$NEWRELIC_TGZ_FILE"; then
    echo "-----> Bundling New Relic v${NEWRELIC_VERSION}"
    curl --silent --max-time 60 --location "https://s3.amazonaws.com/$BUILDPACK_S3_BUCKET/$NEWRELIC_TGZ_FILE" -O
else
    echo "-----> Using cached New Relic v${NEWRELIC_VERSION}"
fi
tar xf $NEWRELIC_TGZ_FILE -C $BUILD_DIR

popd > /dev/null

pushd $BUILD_DIR > /dev/null

# update config files
cp $LP_DIR/conf/httpd.conf apache/conf
cp $LP_DIR/conf/php.ini php

# Check if we need nodejs
if [ -f package.json ]; then
    $BIN_DIR/compile-nodejs "$BUILD_DIR" "$CACHE_DIR"
    # Make the node binaries available to the rollout script
    export PATH=$PATH:$BUILD_DIR/node_modules/.bin/
fi

# Run the rollout script
if [ -f rollout.sh ]; then
    # Make our newly downloaded binaries available
    export PATH=$PATH:$BUILD_DIR/bin

    ./rollout.sh "$BUILD_DIR" "$CACHE_DIR"
fi

cat >> boot.sh <<EOF
    # Make the Heroku environment variables available to Apache and PHP
    for var in \`env|cut -f1 -d=\`; do
        echo "PassEnv \$var" >> /app/apache/conf/httpd.conf;
    done

    if [ -f config/apache.conf ]; then
        echo "-----> Including custom Apache config"
        echo "Include /app/config/apache.conf" >> /app/apache/conf/httpd.conf
    fi

    # Insert the New Relic key (from heroku config) into newrelic.ini
    sed -i "s|REPLACE_WITH_REAL_KEY|${NEW_RELIC_LICENSE_KEY}|g" /app/php/conf.d/newrelic.ini

    export LD_LIBRARY_PATH=/app/php/ext
    export PHP_INI_SCAN_DIR=/app

    # Tail the logs
    touch /app/apache/logs/error_log
    touch /app/apache/logs/access_log
    touch /app/newrelic/var/logs/php_agent.log
    touch /app/newrelic/var/logs/newrelic-daemon.log
    (tail -f /app/apache/logs/*_log /app/newrelic/var/logs/*.log &)

    echo "-----> Launching New Relic daemon"
    /app/newrelic/bin/newrelic-daemon -c /app/newrelic/etc/newrelic.cfg -d error

    echo "-----> Launching apache"
    exec /app/apache/bin/httpd -DNO_DETACH
EOF

chmod +x boot.sh

popd > /dev/null
